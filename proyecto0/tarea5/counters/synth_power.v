/* Generated by Yosys 0.6+292 (git sha1 34e2fb5, gcc 4.9.2-10 -fPIC -Os) */
`ifndef POWER32
`define POWER32
(* src = "counters/counter_32_for_synth.v:3" *)
module counter_32_for_synth(Q, CLK, MODO, ENB, D);
   integer count;
   
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "counters/counter_32_for_synth.v:7" *)
  input CLK;
  (* src = "counters/counter_32_for_synth.v:8" *)
  input [31:0] D;
  (* src = "counters/counter_32_for_synth.v:7" *)
  input ENB;
  (* src = "counters/counter_32_for_synth.v:6" *)
  input [1:0] MODO;
  (* src = "counters/counter_32_for_synth.v:4" *)
  output [31:0] Q;
  (* src = "counters/counter_32_for_synth.v:11" *)
  wire [8:0] RCOS;
  (* src = "counters/counter_32_for_synth.v:19" *)
  wire [7:0] changing;
  (* src = "counters/counter_32_for_synth.v:14" *)
  wire [1:0] real_modo;
  NOT _10_ (
    .A(ENB),
    .Y(_00_)
  );
  NOT _11_ (
    .A(MODO[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(MODO[1]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(_02_),
    .B(_01_),
    .Y(real_modo[1])
  );
  NOR _14_ (
    .A(real_modo[1]),
    .B(RCOS[6]),
    .Y(_03_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_00_),
    .Y(changing[7])
  );
  NOR _16_ (
    .A(real_modo[1]),
    .B(RCOS[5]),
    .Y(_04_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_00_),
    .Y(changing[6])
  );
  NOR _18_ (
    .A(real_modo[1]),
    .B(RCOS[4]),
    .Y(_05_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_00_),
    .Y(changing[5])
  );
  NOR _20_ (
    .A(real_modo[1]),
    .B(RCOS[3]),
    .Y(_06_)
  );
  NOR _21_ (
    .A(_06_),
    .B(_00_),
    .Y(changing[4])
  );
  NOR _22_ (
    .A(real_modo[1]),
    .B(RCOS[2]),
    .Y(_07_)
  );
  NOR _23_ (
    .A(_07_),
    .B(_00_),
    .Y(changing[3])
  );
  NOR _24_ (
    .A(real_modo[1]),
    .B(RCOS[1]),
    .Y(_08_)
  );
  NOR _25_ (
    .A(_08_),
    .B(_00_),
    .Y(changing[2])
  );
  NOR _26_ (
    .A(real_modo[1]),
    .B(RCOS[0]),
    .Y(_09_)
  );
  NOR _27_ (
    .A(_09_),
    .B(_00_),
    .Y(changing[1])
  );
  NAND _28_ (
    .A(_02_),
    .B(_01_),
    .Y(real_modo[0])
  );
  (* src = "counters/counter_32_for_synth.v:31" *)
  counter_for_synth c1 (
    .CARGA(D[3:0]),
    .CLK(CLK),
    .CUENTA(Q[3:0]),
    .ENABLE(ENB),
    .MODO(MODO),
    .RCO(RCOS[0])
  );
  (* src = "counters/counter_32_for_synth.v:37" *)
  counter_for_synth c2 (
    .CARGA(D[7:4]),
    .CLK(CLK),
    .CUENTA(Q[7:4]),
    .ENABLE(changing[1]),
    .MODO(real_modo),
    .RCO(RCOS[1])
  );
  (* src = "counters/counter_32_for_synth.v:43" *)
  counter_for_synth c3 (
    .CARGA(D[11:8]),
    .CLK(CLK),
    .CUENTA(Q[11:8]),
    .ENABLE(changing[2]),
    .MODO(real_modo),
    .RCO(RCOS[2])
  );
  (* src = "counters/counter_32_for_synth.v:49" *)
  counter_for_synth c4 (
    .CARGA(D[15:12]),
    .CLK(CLK),
    .CUENTA(Q[15:12]),
    .ENABLE(changing[3]),
    .MODO(real_modo),
    .RCO(RCOS[3])
  );
  (* src = "counters/counter_32_for_synth.v:55" *)
  counter_for_synth c5 (
    .CARGA(D[19:16]),
    .CLK(CLK),
    .CUENTA(Q[19:16]),
    .ENABLE(changing[4]),
    .MODO(real_modo),
    .RCO(RCOS[4])
  );
  (* src = "counters/counter_32_for_synth.v:61" *)
  counter_for_synth c6 (
    .CARGA(D[23:20]),
    .CLK(CLK),
    .CUENTA(Q[23:20]),
    .ENABLE(changing[5]),
    .MODO(real_modo),
    .RCO(RCOS[5])
  );
  (* src = "counters/counter_32_for_synth.v:67" *)
  counter_for_synth c7 (
    .CARGA(D[27:24]),
    .CLK(CLK),
    .CUENTA(Q[27:24]),
    .ENABLE(changing[6]),
    .MODO(real_modo),
    .RCO(RCOS[6])
  );
  (* src = "counters/counter_32_for_synth.v:73" *)
  counter_for_synth c8 (
    .CARGA(D[31:28]),
    .CLK(CLK),
    .CUENTA(Q[31:28]),
    .ENABLE(changing[7]),
    .MODO(real_modo),
    .RCO(RCOS[7])
  );
  assign changing[0] = ENB;

   always @(*) count=_10_.count+_11_.count+_12_.count+_13_.count+_14_.count+_15_.count+_16_.count+_17_.count+_18_.count+_19_.count+_20_.count+_21_.count+_22_.count+_23_.count+_24_.count+_25_.count+_26_.count+_27_.count+_28_.count+c1.count+c2.count+c3.count+c4.count+c5.count+c6.count+c7.count+c8.count;
   
endmodule // counter_32_for_synth

`endif

`ifndef POWER4
`define POWER4
(* src = "counters/counter_for_synth.v:4" *)
module counter_for_synth(CUENTA, RCO, CARGA, ENABLE, MODO, CLK);
   integer count=0;
   
  (* src = "counters/counter_for_synth.v:21" *)
  wire [3:0] _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  (* src = "counters/counter_for_synth.v:11" *)
  input [3:0] CARGA;
  (* src = "counters/counter_for_synth.v:9" *)
  input CLK;
  (* src = "counters/counter_for_synth.v:6" *)
  output [3:0] CUENTA;
  (* src = "counters/counter_for_synth.v:9" *)
  input ENABLE;
  (* src = "counters/counter_for_synth.v:10" *)
  input [1:0] MODO;
  (* src = "counters/counter_for_synth.v:7" *)
  output RCO;
  NOT _100_ (
    .A(CUENTA[3]),
    .Y(_020_)
  );
  NAND _101_ (
    .A(CUENTA[1]),
    .B(CUENTA[0]),
    .Y(_021_)
  );
  NOT _102_ (
    .A(MODO[0]),
    .Y(_022_)
  );
  NOT _103_ (
    .A(MODO[1]),
    .Y(_023_)
  );
  NAND _104_ (
    .A(_023_),
    .B(_022_),
    .Y(_024_)
  );
  NOR _105_ (
    .A(_024_),
    .B(_021_),
    .Y(_025_)
  );
  NAND _106_ (
    .A(_025_),
    .B(CUENTA[2]),
    .Y(_026_)
  );
  NOT _107_ (
    .A(_026_),
    .Y(_027_)
  );
  NOR _108_ (
    .A(_027_),
    .B(_020_),
    .Y(_028_)
  );
  NOR _109_ (
    .A(_023_),
    .B(MODO[0]),
    .Y(_029_)
  );
  NAND _110_ (
    .A(_029_),
    .B(_021_),
    .Y(_030_)
  );
  NOR _111_ (
    .A(MODO[1]),
    .B(_022_),
    .Y(_031_)
  );
  NOR _112_ (
    .A(CUENTA[1]),
    .B(CUENTA[0]),
    .Y(_032_)
  );
  NAND _113_ (
    .A(_032_),
    .B(_031_),
    .Y(_033_)
  );
  NAND _114_ (
    .A(_033_),
    .B(_030_),
    .Y(_034_)
  );
  NOR _115_ (
    .A(MODO[1]),
    .B(MODO[0]),
    .Y(_035_)
  );
  NOR _116_ (
    .A(_035_),
    .B(CUENTA[2]),
    .Y(_036_)
  );
  NAND _117_ (
    .A(_036_),
    .B(_034_),
    .Y(_037_)
  );
  NAND _118_ (
    .A(_037_),
    .B(_020_),
    .Y(_038_)
  );
  NAND _119_ (
    .A(_038_),
    .B(ENABLE),
    .Y(_039_)
  );
  NOR _120_ (
    .A(_039_),
    .B(_028_),
    .Y(RCO)
  );
  NOR _121_ (
    .A(ENABLE),
    .B(CUENTA[0]),
    .Y(_040_)
  );
  NOR _122_ (
    .A(_023_),
    .B(_022_),
    .Y(_041_)
  );
  NOT _123_ (
    .A(_041_),
    .Y(_042_)
  );
  NOT _124_ (
    .A(_029_),
    .Y(_043_)
  );
  NOT _125_ (
    .A(CUENTA[0]),
    .Y(_044_)
  );
  NAND _126_ (
    .A(_024_),
    .B(_044_),
    .Y(_045_)
  );
  NAND _127_ (
    .A(_045_),
    .B(ENABLE),
    .Y(_046_)
  );
  NOR _128_ (
    .A(_046_),
    .B(_043_),
    .Y(_047_)
  );
  NOT _129_ (
    .A(_047_),
    .Y(_048_)
  );
  NAND _130_ (
    .A(_048_),
    .B(_042_),
    .Y(_049_)
  );
  NAND _131_ (
    .A(_046_),
    .B(_031_),
    .Y(_050_)
  );
  NAND _132_ (
    .A(_035_),
    .B(CUENTA[0]),
    .Y(_051_)
  );
  NOR _133_ (
    .A(_046_),
    .B(_031_),
    .Y(_052_)
  );
  NAND _134_ (
    .A(_052_),
    .B(_051_),
    .Y(_053_)
  );
  NAND _135_ (
    .A(_053_),
    .B(_050_),
    .Y(_054_)
  );
  NOR _136_ (
    .A(_054_),
    .B(MODO[1]),
    .Y(_055_)
  );
  NOR _137_ (
    .A(_055_),
    .B(_049_),
    .Y(_056_)
  );
  NAND _138_ (
    .A(_041_),
    .B(CARGA[0]),
    .Y(_057_)
  );
  NAND _139_ (
    .A(_057_),
    .B(ENABLE),
    .Y(_058_)
  );
  NOR _140_ (
    .A(_058_),
    .B(_056_),
    .Y(_059_)
  );
  NOR _141_ (
    .A(_059_),
    .B(_040_),
    .Y(_000_[0])
  );
  NOR _142_ (
    .A(ENABLE),
    .B(CUENTA[1]),
    .Y(_060_)
  );
  NOT _143_ (
    .A(ENABLE),
    .Y(_061_)
  );
  NOT _144_ (
    .A(_031_),
    .Y(_062_)
  );
  NOR _145_ (
    .A(_035_),
    .B(CUENTA[0]),
    .Y(_063_)
  );
  NOR _146_ (
    .A(_063_),
    .B(_061_),
    .Y(_064_)
  );
  NOR _147_ (
    .A(_064_),
    .B(_062_),
    .Y(_065_)
  );
  NOT _148_ (
    .A(CUENTA[1]),
    .Y(_066_)
  );
  NAND _149_ (
    .A(_051_),
    .B(_066_),
    .Y(_067_)
  );
  NOR _150_ (
    .A(_025_),
    .B(_061_),
    .Y(_068_)
  );
  NAND _151_ (
    .A(_068_),
    .B(_067_),
    .Y(_069_)
  );
  NOR _152_ (
    .A(_069_),
    .B(_065_),
    .Y(_070_)
  );
  NAND _153_ (
    .A(_067_),
    .B(ENABLE),
    .Y(_071_)
  );
  NOR _154_ (
    .A(_071_),
    .B(_025_),
    .Y(_072_)
  );
  NOR _155_ (
    .A(_072_),
    .B(_050_),
    .Y(_073_)
  );
  NOR _156_ (
    .A(_073_),
    .B(_070_),
    .Y(_074_)
  );
  NOR _157_ (
    .A(_074_),
    .B(_061_),
    .Y(_075_)
  );
  NOR _158_ (
    .A(_075_),
    .B(_047_),
    .Y(_076_)
  );
  NAND _159_ (
    .A(_072_),
    .B(_047_),
    .Y(_077_)
  );
  NAND _160_ (
    .A(_077_),
    .B(_042_),
    .Y(_078_)
  );
  NOR _161_ (
    .A(_078_),
    .B(_076_),
    .Y(_079_)
  );
  NAND _162_ (
    .A(_041_),
    .B(CARGA[1]),
    .Y(_080_)
  );
  NAND _163_ (
    .A(_080_),
    .B(ENABLE),
    .Y(_081_)
  );
  NOR _164_ (
    .A(_081_),
    .B(_079_),
    .Y(_082_)
  );
  NOR _165_ (
    .A(_082_),
    .B(_060_),
    .Y(_000_[1])
  );
  NAND _166_ (
    .A(_061_),
    .B(CUENTA[2]),
    .Y(_083_)
  );
  NOT _167_ (
    .A(CARGA[2]),
    .Y(_084_)
  );
  NAND _168_ (
    .A(_041_),
    .B(_084_),
    .Y(_085_)
  );
  NOR _169_ (
    .A(_025_),
    .B(CUENTA[2]),
    .Y(_086_)
  );
  NOR _170_ (
    .A(_086_),
    .B(_061_),
    .Y(_087_)
  );
  NAND _171_ (
    .A(_087_),
    .B(_026_),
    .Y(_088_)
  );
  NOR _172_ (
    .A(_088_),
    .B(_073_),
    .Y(_089_)
  );
  NAND _173_ (
    .A(_069_),
    .B(_065_),
    .Y(_090_)
  );
  NAND _174_ (
    .A(_026_),
    .B(ENABLE),
    .Y(_091_)
  );
  NOR _175_ (
    .A(_091_),
    .B(_086_),
    .Y(_092_)
  );
  NOR _176_ (
    .A(_092_),
    .B(_090_),
    .Y(_093_)
  );
  NOR _177_ (
    .A(_093_),
    .B(_089_),
    .Y(_094_)
  );
  NOR _178_ (
    .A(_094_),
    .B(_061_),
    .Y(_095_)
  );
  NAND _179_ (
    .A(_075_),
    .B(_054_),
    .Y(_096_)
  );
  NAND _180_ (
    .A(_096_),
    .B(_029_),
    .Y(_097_)
  );
  NOR _181_ (
    .A(_097_),
    .B(_095_),
    .Y(_098_)
  );
  NAND _182_ (
    .A(_097_),
    .B(_095_),
    .Y(_099_)
  );
  NAND _183_ (
    .A(_099_),
    .B(_042_),
    .Y(_001_)
  );
  NOR _184_ (
    .A(_001_),
    .B(_098_),
    .Y(_002_)
  );
  NOR _185_ (
    .A(_002_),
    .B(_061_),
    .Y(_003_)
  );
  NAND _186_ (
    .A(_003_),
    .B(_085_),
    .Y(_004_)
  );
  NAND _187_ (
    .A(_004_),
    .B(_083_),
    .Y(_000_[2])
  );
  NAND _188_ (
    .A(_061_),
    .B(CUENTA[3]),
    .Y(_005_)
  );
  NAND _189_ (
    .A(_026_),
    .B(CUENTA[3]),
    .Y(_006_)
  );
  NAND _190_ (
    .A(_027_),
    .B(_020_),
    .Y(_007_)
  );
  NAND _191_ (
    .A(_007_),
    .B(_006_),
    .Y(_008_)
  );
  NAND _192_ (
    .A(_008_),
    .B(_093_),
    .Y(_009_)
  );
  NOR _193_ (
    .A(_008_),
    .B(_093_),
    .Y(_010_)
  );
  NOR _194_ (
    .A(_010_),
    .B(_061_),
    .Y(_011_)
  );
  NAND _195_ (
    .A(_011_),
    .B(_009_),
    .Y(_012_)
  );
  NAND _196_ (
    .A(_012_),
    .B(_098_),
    .Y(_013_)
  );
  NOR _197_ (
    .A(_012_),
    .B(_098_),
    .Y(_014_)
  );
  NOR _198_ (
    .A(_014_),
    .B(_041_),
    .Y(_015_)
  );
  NAND _199_ (
    .A(_015_),
    .B(_013_),
    .Y(_016_)
  );
  NOR _200_ (
    .A(_042_),
    .B(CARGA[3]),
    .Y(_017_)
  );
  NOR _201_ (
    .A(_017_),
    .B(_061_),
    .Y(_018_)
  );
  NAND _202_ (
    .A(_018_),
    .B(_016_),
    .Y(_019_)
  );
  NAND _203_ (
    .A(_019_),
    .B(_005_),
    .Y(_000_[3])
  );
  DFF _204_ (
    .C(CLK),
    .D(_000_[0]),
    .Q(CUENTA[0])
  );
  DFF _205_ (
    .C(CLK),
    .D(_000_[1]),
    .Q(CUENTA[1])
  );
  DFF _206_ (
    .C(CLK),
    .D(_000_[2]),
    .Q(CUENTA[2])
  );
  DFF _207_ (
    .C(CLK),
    .D(_000_[3]),
    .Q(CUENTA[3])
  );

   always @(*) begin
      count=_100_.count+_101_.count+_102_.count+_103_.count+_104_.count+_105_.count+_106_.count+_107_.count+_108_.count+_109_.count+_110_.count+_111_.count+_112_.count+_113_.count+_114_.count+_115_.count+_116_.count+_117_.count+_118_.count+_119_.count+_120_.count+_121_.count+_122_.count+_123_.count+_124_.count+_125_.count+_126_.count+_127_.count+_128_.count+_129_.count+_130_.count+_131_.count+_132_.count+_133_.count+_134_.count+_135_.count+_136_.count+_137_.count+_138_.count+_139_.count+_140_.count+_141_.count+_142_.count+_143_.count+_144_.count+_145_.count+_146_.count+_147_.count+_148_.count+_149_.count+_150_.count+_151_.count+_152_.count+_153_.count+_154_.count+_155_.count+_156_.count+_157_.count+_158_.count+_159_.count+_160_.count+_161_.count+_162_.count+_163_.count+_164_.count+_165_.count+_166_.count+_167_.count+_168_.count+_169_.count+_170_.count+_171_.count+_172_.count+_173_.count+_174_.count+_175_.count+_176_.count+_177_.count+_178_.count+_179_.count+_180_.count+_181_.count+_182_.count+_183_.count+_184_.count+_185_.count+_186_.count+_187_.count+_188_.count+_189_.count+_190_.count+_191_.count+_192_.count+_193_.count+_194_.count+_195_.count+_196_.count+_197_.count+_198_.count+_199_.count+_200_.count+_201_.count+_202_.count+_203_.count+_204_.count+_205_.count+_206_.count+_207_.count;
   end 
   
   
   

endmodule
`endif
